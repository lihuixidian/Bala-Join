// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: stream.proto

#include "stream.pb.h"
#include "stream.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace stream {

static const char* Stream_method_names[] = {
  "/stream.Stream/StartProcessors",
  "/stream.Stream/GetStream",
  "/stream.Stream/GetBDStream",
  "/stream.Stream/RunDistLDSketch",
};

std::unique_ptr< Stream::Stub> Stream::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Stream::Stub> stub(new Stream::Stub(channel, options));
  return stub;
}

Stream::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_StartProcessors_(Stream_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetStream_(Stream_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_GetBDStream_(Stream_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_RunDistLDSketch_(Stream_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  {}

::grpc::Status Stream::Stub::StartProcessors(::grpc::ClientContext* context, const ::stream::ProcessorsInfo& request, ::stream::StatisticMsg* response) {
  return ::grpc::internal::BlockingUnaryCall< ::stream::ProcessorsInfo, ::stream::StatisticMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartProcessors_, context, request, response);
}

void Stream::Stub::async::StartProcessors(::grpc::ClientContext* context, const ::stream::ProcessorsInfo* request, ::stream::StatisticMsg* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::stream::ProcessorsInfo, ::stream::StatisticMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartProcessors_, context, request, response, std::move(f));
}

void Stream::Stub::async::StartProcessors(::grpc::ClientContext* context, const ::stream::ProcessorsInfo* request, ::stream::StatisticMsg* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartProcessors_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stream::StatisticMsg>* Stream::Stub::PrepareAsyncStartProcessorsRaw(::grpc::ClientContext* context, const ::stream::ProcessorsInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::stream::StatisticMsg, ::stream::ProcessorsInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartProcessors_, context, request);
}

::grpc::ClientAsyncResponseReader< ::stream::StatisticMsg>* Stream::Stub::AsyncStartProcessorsRaw(::grpc::ClientContext* context, const ::stream::ProcessorsInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartProcessorsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::stream::SMessage>* Stream::Stub::GetStreamRaw(::grpc::ClientContext* context, ::stream::StreamSummary* response) {
  return ::grpc::internal::ClientWriterFactory< ::stream::SMessage>::Create(channel_.get(), rpcmethod_GetStream_, context, response);
}

void Stream::Stub::async::GetStream(::grpc::ClientContext* context, ::stream::StreamSummary* response, ::grpc::ClientWriteReactor< ::stream::SMessage>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::stream::SMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_GetStream_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::stream::SMessage>* Stream::Stub::AsyncGetStreamRaw(::grpc::ClientContext* context, ::stream::StreamSummary* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::stream::SMessage>::Create(channel_.get(), cq, rpcmethod_GetStream_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::stream::SMessage>* Stream::Stub::PrepareAsyncGetStreamRaw(::grpc::ClientContext* context, ::stream::StreamSummary* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::stream::SMessage>::Create(channel_.get(), cq, rpcmethod_GetStream_, context, response, false, nullptr);
}

::grpc::ClientWriter< ::stream::BDMessage>* Stream::Stub::GetBDStreamRaw(::grpc::ClientContext* context, ::stream::StreamSummary* response) {
  return ::grpc::internal::ClientWriterFactory< ::stream::BDMessage>::Create(channel_.get(), rpcmethod_GetBDStream_, context, response);
}

void Stream::Stub::async::GetBDStream(::grpc::ClientContext* context, ::stream::StreamSummary* response, ::grpc::ClientWriteReactor< ::stream::BDMessage>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::stream::BDMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_GetBDStream_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::stream::BDMessage>* Stream::Stub::AsyncGetBDStreamRaw(::grpc::ClientContext* context, ::stream::StreamSummary* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::stream::BDMessage>::Create(channel_.get(), cq, rpcmethod_GetBDStream_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::stream::BDMessage>* Stream::Stub::PrepareAsyncGetBDStreamRaw(::grpc::ClientContext* context, ::stream::StreamSummary* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::stream::BDMessage>::Create(channel_.get(), cq, rpcmethod_GetBDStream_, context, response, false, nullptr);
}

::grpc::ClientWriter< ::stream::SMessage>* Stream::Stub::RunDistLDSketchRaw(::grpc::ClientContext* context, ::stream::SMessage* response) {
  return ::grpc::internal::ClientWriterFactory< ::stream::SMessage>::Create(channel_.get(), rpcmethod_RunDistLDSketch_, context, response);
}

void Stream::Stub::async::RunDistLDSketch(::grpc::ClientContext* context, ::stream::SMessage* response, ::grpc::ClientWriteReactor< ::stream::SMessage>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::stream::SMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_RunDistLDSketch_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::stream::SMessage>* Stream::Stub::AsyncRunDistLDSketchRaw(::grpc::ClientContext* context, ::stream::SMessage* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::stream::SMessage>::Create(channel_.get(), cq, rpcmethod_RunDistLDSketch_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::stream::SMessage>* Stream::Stub::PrepareAsyncRunDistLDSketchRaw(::grpc::ClientContext* context, ::stream::SMessage* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::stream::SMessage>::Create(channel_.get(), cq, rpcmethod_RunDistLDSketch_, context, response, false, nullptr);
}

Stream::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stream_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stream::Service, ::stream::ProcessorsInfo, ::stream::StatisticMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stream::Service* service,
             ::grpc::ServerContext* ctx,
             const ::stream::ProcessorsInfo* req,
             ::stream::StatisticMsg* resp) {
               return service->StartProcessors(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stream_method_names[1],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Stream::Service, ::stream::SMessage, ::stream::StreamSummary>(
          [](Stream::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::stream::SMessage>* reader,
             ::stream::StreamSummary* resp) {
               return service->GetStream(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stream_method_names[2],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Stream::Service, ::stream::BDMessage, ::stream::StreamSummary>(
          [](Stream::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::stream::BDMessage>* reader,
             ::stream::StreamSummary* resp) {
               return service->GetBDStream(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stream_method_names[3],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Stream::Service, ::stream::SMessage, ::stream::SMessage>(
          [](Stream::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::stream::SMessage>* reader,
             ::stream::SMessage* resp) {
               return service->RunDistLDSketch(ctx, reader, resp);
             }, this)));
}

Stream::Service::~Service() {
}

::grpc::Status Stream::Service::StartProcessors(::grpc::ServerContext* context, const ::stream::ProcessorsInfo* request, ::stream::StatisticMsg* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stream::Service::GetStream(::grpc::ServerContext* context, ::grpc::ServerReader< ::stream::SMessage>* reader, ::stream::StreamSummary* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stream::Service::GetBDStream(::grpc::ServerContext* context, ::grpc::ServerReader< ::stream::BDMessage>* reader, ::stream::StreamSummary* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stream::Service::RunDistLDSketch(::grpc::ServerContext* context, ::grpc::ServerReader< ::stream::SMessage>* reader, ::stream::SMessage* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace stream

