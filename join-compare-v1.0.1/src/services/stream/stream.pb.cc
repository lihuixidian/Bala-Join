// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stream.proto

#include "stream.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace stream {
constexpr StatisticMsg::StatisticMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : small_skewkeys_()
  , big_skewkeys_()
  , network_phase1_(int64_t{0})
  , network_phase2_(int64_t{0})
  , result_counts_(int64_t{0}){}
struct StatisticMsgDefaultTypeInternal {
  constexpr StatisticMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatisticMsgDefaultTypeInternal() {}
  union {
    StatisticMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatisticMsgDefaultTypeInternal _StatisticMsg_default_instance_;
constexpr StreamSummary::StreamSummary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : count_(int64_t{0}){}
struct StreamSummaryDefaultTypeInternal {
  constexpr StreamSummaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamSummaryDefaultTypeInternal() {}
  union {
    StreamSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamSummaryDefaultTypeInternal _StreamSummary_default_instance_;
constexpr Tuple::Tuple(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TupleDefaultTypeInternal {
  constexpr TupleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TupleDefaultTypeInternal() {}
  union {
    Tuple _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TupleDefaultTypeInternal _Tuple_default_instance_;
constexpr BatchTuple::BatchTuple(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tuples_()
  , empty_(false){}
struct BatchTupleDefaultTypeInternal {
  constexpr BatchTupleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BatchTupleDefaultTypeInternal() {}
  union {
    BatchTuple _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BatchTupleDefaultTypeInternal _BatchTuple_default_instance_;
constexpr SMessage::SMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : skew_keys_()
  , batch_tuples_(nullptr)
  , stream_id_(0){}
struct SMessageDefaultTypeInternal {
  constexpr SMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SMessageDefaultTypeInternal() {}
  union {
    SMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SMessageDefaultTypeInternal _SMessage_default_instance_;
constexpr BDMessage::BDMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : need_keys_()
  , done_keys_()
  , batch_tuples_(nullptr)
  , stream_id_(0)
  , close_(false){}
struct BDMessageDefaultTypeInternal {
  constexpr BDMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BDMessageDefaultTypeInternal() {}
  union {
    BDMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BDMessageDefaultTypeInternal _BDMessage_default_instance_;
constexpr StreamInfo::StreamInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : server_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stream_id_(0)
  , type_(0)
{}
struct StreamInfoDefaultTypeInternal {
  constexpr StreamInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamInfoDefaultTypeInternal() {}
  union {
    StreamInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamInfoDefaultTypeInternal _StreamInfo_default_instance_;
constexpr TableReaderInfo::TableReaderInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : output_infos_()
  , file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0)
  , tr_type_(0)

  , router_type_(0)
{}
struct TableReaderInfoDefaultTypeInternal {
  constexpr TableReaderInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TableReaderInfoDefaultTypeInternal() {}
  union {
    TableReaderInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TableReaderInfoDefaultTypeInternal _TableReaderInfo_default_instance_;
constexpr HashJoinerInfo::HashJoinerInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : big_infos_()
  , small_infos_()
  , bd_infos_()
  , output_infos_()
  , type_(0)
{}
struct HashJoinerInfoDefaultTypeInternal {
  constexpr HashJoinerInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HashJoinerInfoDefaultTypeInternal() {}
  union {
    HashJoinerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HashJoinerInfoDefaultTypeInternal _HashJoinerInfo_default_instance_;
constexpr SFRInfo::SFRInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : n_(0)
  , rows_(0)
  , cols_(0){}
struct SFRInfoDefaultTypeInternal {
  constexpr SFRInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SFRInfoDefaultTypeInternal() {}
  union {
    SFRInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SFRInfoDefaultTypeInternal _SFRInfo_default_instance_;
constexpr ProcessorsInfo::ProcessorsInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tablereader_infos_()
  , hashjoiner_infos_()
  , sfr_info_(nullptr){}
struct ProcessorsInfoDefaultTypeInternal {
  constexpr ProcessorsInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProcessorsInfoDefaultTypeInternal() {}
  union {
    ProcessorsInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProcessorsInfoDefaultTypeInternal _ProcessorsInfo_default_instance_;
}  // namespace stream
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_stream_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_stream_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_stream_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_stream_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stream::StatisticMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stream::StatisticMsg, network_phase1_),
  PROTOBUF_FIELD_OFFSET(::stream::StatisticMsg, network_phase2_),
  PROTOBUF_FIELD_OFFSET(::stream::StatisticMsg, result_counts_),
  PROTOBUF_FIELD_OFFSET(::stream::StatisticMsg, small_skewkeys_),
  PROTOBUF_FIELD_OFFSET(::stream::StatisticMsg, big_skewkeys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stream::StreamSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stream::StreamSummary, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stream::Tuple, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stream::Tuple, key_),
  PROTOBUF_FIELD_OFFSET(::stream::Tuple, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stream::BatchTuple, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stream::BatchTuple, empty_),
  PROTOBUF_FIELD_OFFSET(::stream::BatchTuple, tuples_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stream::SMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stream::SMessage, stream_id_),
  PROTOBUF_FIELD_OFFSET(::stream::SMessage, skew_keys_),
  PROTOBUF_FIELD_OFFSET(::stream::SMessage, batch_tuples_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stream::BDMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stream::BDMessage, stream_id_),
  PROTOBUF_FIELD_OFFSET(::stream::BDMessage, need_keys_),
  PROTOBUF_FIELD_OFFSET(::stream::BDMessage, done_keys_),
  PROTOBUF_FIELD_OFFSET(::stream::BDMessage, batch_tuples_),
  PROTOBUF_FIELD_OFFSET(::stream::BDMessage, close_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stream::StreamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stream::StreamInfo, stream_id_),
  PROTOBUF_FIELD_OFFSET(::stream::StreamInfo, type_),
  PROTOBUF_FIELD_OFFSET(::stream::StreamInfo, server_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stream::TableReaderInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stream::TableReaderInfo, id_),
  PROTOBUF_FIELD_OFFSET(::stream::TableReaderInfo, tr_type_),
  PROTOBUF_FIELD_OFFSET(::stream::TableReaderInfo, file_name_),
  PROTOBUF_FIELD_OFFSET(::stream::TableReaderInfo, router_type_),
  PROTOBUF_FIELD_OFFSET(::stream::TableReaderInfo, output_infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stream::HashJoinerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stream::HashJoinerInfo, type_),
  PROTOBUF_FIELD_OFFSET(::stream::HashJoinerInfo, big_infos_),
  PROTOBUF_FIELD_OFFSET(::stream::HashJoinerInfo, small_infos_),
  PROTOBUF_FIELD_OFFSET(::stream::HashJoinerInfo, bd_infos_),
  PROTOBUF_FIELD_OFFSET(::stream::HashJoinerInfo, output_infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stream::SFRInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stream::SFRInfo, n_),
  PROTOBUF_FIELD_OFFSET(::stream::SFRInfo, rows_),
  PROTOBUF_FIELD_OFFSET(::stream::SFRInfo, cols_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stream::ProcessorsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stream::ProcessorsInfo, sfr_info_),
  PROTOBUF_FIELD_OFFSET(::stream::ProcessorsInfo, tablereader_infos_),
  PROTOBUF_FIELD_OFFSET(::stream::ProcessorsInfo, hashjoiner_infos_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::stream::StatisticMsg)},
  { 10, -1, sizeof(::stream::StreamSummary)},
  { 16, -1, sizeof(::stream::Tuple)},
  { 23, -1, sizeof(::stream::BatchTuple)},
  { 30, -1, sizeof(::stream::SMessage)},
  { 38, -1, sizeof(::stream::BDMessage)},
  { 48, -1, sizeof(::stream::StreamInfo)},
  { 56, -1, sizeof(::stream::TableReaderInfo)},
  { 66, -1, sizeof(::stream::HashJoinerInfo)},
  { 76, -1, sizeof(::stream::SFRInfo)},
  { 84, -1, sizeof(::stream::ProcessorsInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stream::_StatisticMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stream::_StreamSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stream::_Tuple_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stream::_BatchTuple_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stream::_SMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stream::_BDMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stream::_StreamInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stream::_TableReaderInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stream::_HashJoinerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stream::_SFRInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stream::_ProcessorsInfo_default_instance_),
};

const char descriptor_table_protodef_stream_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014stream.proto\022\006stream\"\241\001\n\014StatisticMsg\022"
  "\026\n\016network_phase1\030\001 \001(\003\022\026\n\016network_phase"
  "2\030\002 \001(\003\022\025\n\rresult_counts\030\003 \001(\003\022%\n\016small_"
  "skewkeys\030\004 \003(\0132\r.stream.Tuple\022#\n\014big_ske"
  "wkeys\030\005 \003(\0132\r.stream.Tuple\"\036\n\rStreamSumm"
  "ary\022\r\n\005count\030\001 \001(\003\"#\n\005Tuple\022\013\n\003key\030\001 \001(\t"
  "\022\r\n\005value\030\002 \001(\t\":\n\nBatchTuple\022\r\n\005empty\030\001"
  " \001(\010\022\035\n\006tuples\030\003 \003(\0132\r.stream.Tuple\"Z\n\010S"
  "Message\022\021\n\tstream_id\030\001 \001(\005\022\021\n\tskew_keys\030"
  "\002 \003(\t\022(\n\014batch_tuples\030\003 \001(\0132\022.stream.Bat"
  "chTuple\"}\n\tBDMessage\022\021\n\tstream_id\030\001 \001(\005\022"
  "\021\n\tneed_keys\030\002 \003(\t\022\021\n\tdone_keys\030\003 \003(\t\022(\n"
  "\014batch_tuples\030\004 \001(\0132\022.stream.BatchTuple\022"
  "\r\n\005close\030\005 \001(\010\"\211\001\n\nStreamInfo\022\021\n\tstream_"
  "id\030\001 \001(\005\022+\n\004type\030\002 \001(\0162\035.stream.StreamIn"
  "fo.StreamType\022\026\n\016server_address\030\003 \001(\t\"#\n"
  "\nStreamType\022\t\n\005LOCAL\020\000\022\n\n\006REMOTE\020\001\"\334\002\n\017T"
  "ableReaderInfo\022\n\n\002id\030\001 \001(\005\0228\n\007tr_type\030\002 "
  "\001(\0162\'.stream.TableReaderInfo.TableReader"
  "Type\022\021\n\tfile_name\030\003 \001(\t\0227\n\013router_type\030\004"
  " \001(\0162\".stream.TableReaderInfo.RouterType"
  "\022(\n\014output_infos\030\005 \003(\0132\022.stream.StreamIn"
  "fo\"f\n\nRouterType\022\010\n\004HASH\020\000\022\013\n\007AVERAGE\020\001\022"
  "\n\n\006NATIVE\020\002\022\013\n\007BALANCE\020\003\022\r\n\tFLOWSMALL\020\004\022"
  "\013\n\007FLOWBIG\020\005\022\014\n\010LDSKETCH\020\006\"%\n\017TableReade"
  "rType\022\t\n\005SMALL\020\000\022\007\n\003BIG\020\001\"\233\002\n\016HashJoiner"
  "Info\022+\n\004type\030\001 \001(\0162\035.stream.HashJoinerIn"
  "fo.HJType\022%\n\tbig_infos\030\002 \003(\0132\022.stream.St"
  "reamInfo\022\'\n\013small_infos\030\003 \003(\0132\022.stream.S"
  "treamInfo\022$\n\010bd_infos\030\004 \003(\0132\022.stream.Str"
  "eamInfo\022(\n\014output_infos\030\005 \003(\0132\022.stream.S"
  "treamInfo\"<\n\006HJType\022\010\n\004BASE\020\000\022\007\n\003PNR\020\001\022\010"
  "\n\004PRPD\020\002\022\007\n\003BNR\020\003\022\014\n\010FLOWJOIN\020\004\"0\n\007SFRIn"
  "fo\022\t\n\001n\030\001 \001(\005\022\014\n\004rows\030\002 \001(\005\022\014\n\004cols\030\003 \001("
  "\005\"\231\001\n\016ProcessorsInfo\022!\n\010sfr_info\030\001 \001(\0132\017"
  ".stream.SFRInfo\0222\n\021tablereader_infos\030\002 \003"
  "(\0132\027.stream.TableReaderInfo\0220\n\020hashjoine"
  "r_infos\030\003 \003(\0132\026.stream.HashJoinerInfo2\375\001"
  "\n\006Stream\022A\n\017StartProcessors\022\026.stream.Pro"
  "cessorsInfo\032\024.stream.StatisticMsg\"\000\0228\n\tG"
  "etStream\022\020.stream.SMessage\032\025.stream.Stre"
  "amSummary\"\000(\001\022;\n\013GetBDStream\022\021.stream.BD"
  "Message\032\025.stream.StreamSummary\"\000(\001\0229\n\017Ru"
  "nDistLDSketch\022\020.stream.SMessage\032\020.stream"
  ".SMessage\"\000(\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_stream_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_stream_2eproto = {
  false, false, 1781, descriptor_table_protodef_stream_2eproto, "stream.proto", 
  &descriptor_table_stream_2eproto_once, nullptr, 0, 11,
  schemas, file_default_instances, TableStruct_stream_2eproto::offsets,
  file_level_metadata_stream_2eproto, file_level_enum_descriptors_stream_2eproto, file_level_service_descriptors_stream_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_stream_2eproto_getter() {
  return &descriptor_table_stream_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_stream_2eproto(&descriptor_table_stream_2eproto);
namespace stream {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamInfo_StreamType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stream_2eproto);
  return file_level_enum_descriptors_stream_2eproto[0];
}
bool StreamInfo_StreamType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StreamInfo_StreamType StreamInfo::LOCAL;
constexpr StreamInfo_StreamType StreamInfo::REMOTE;
constexpr StreamInfo_StreamType StreamInfo::StreamType_MIN;
constexpr StreamInfo_StreamType StreamInfo::StreamType_MAX;
constexpr int StreamInfo::StreamType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TableReaderInfo_RouterType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stream_2eproto);
  return file_level_enum_descriptors_stream_2eproto[1];
}
bool TableReaderInfo_RouterType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TableReaderInfo_RouterType TableReaderInfo::HASH;
constexpr TableReaderInfo_RouterType TableReaderInfo::AVERAGE;
constexpr TableReaderInfo_RouterType TableReaderInfo::NATIVE;
constexpr TableReaderInfo_RouterType TableReaderInfo::BALANCE;
constexpr TableReaderInfo_RouterType TableReaderInfo::FLOWSMALL;
constexpr TableReaderInfo_RouterType TableReaderInfo::FLOWBIG;
constexpr TableReaderInfo_RouterType TableReaderInfo::LDSKETCH;
constexpr TableReaderInfo_RouterType TableReaderInfo::RouterType_MIN;
constexpr TableReaderInfo_RouterType TableReaderInfo::RouterType_MAX;
constexpr int TableReaderInfo::RouterType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TableReaderInfo_TableReaderType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stream_2eproto);
  return file_level_enum_descriptors_stream_2eproto[2];
}
bool TableReaderInfo_TableReaderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TableReaderInfo_TableReaderType TableReaderInfo::SMALL;
constexpr TableReaderInfo_TableReaderType TableReaderInfo::BIG;
constexpr TableReaderInfo_TableReaderType TableReaderInfo::TableReaderType_MIN;
constexpr TableReaderInfo_TableReaderType TableReaderInfo::TableReaderType_MAX;
constexpr int TableReaderInfo::TableReaderType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HashJoinerInfo_HJType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stream_2eproto);
  return file_level_enum_descriptors_stream_2eproto[3];
}
bool HashJoinerInfo_HJType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr HashJoinerInfo_HJType HashJoinerInfo::BASE;
constexpr HashJoinerInfo_HJType HashJoinerInfo::PNR;
constexpr HashJoinerInfo_HJType HashJoinerInfo::PRPD;
constexpr HashJoinerInfo_HJType HashJoinerInfo::BNR;
constexpr HashJoinerInfo_HJType HashJoinerInfo::FLOWJOIN;
constexpr HashJoinerInfo_HJType HashJoinerInfo::HJType_MIN;
constexpr HashJoinerInfo_HJType HashJoinerInfo::HJType_MAX;
constexpr int HashJoinerInfo::HJType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class StatisticMsg::_Internal {
 public:
};

StatisticMsg::StatisticMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  small_skewkeys_(arena),
  big_skewkeys_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stream.StatisticMsg)
}
StatisticMsg::StatisticMsg(const StatisticMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      small_skewkeys_(from.small_skewkeys_),
      big_skewkeys_(from.big_skewkeys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&network_phase1_, &from.network_phase1_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_counts_) -
    reinterpret_cast<char*>(&network_phase1_)) + sizeof(result_counts_));
  // @@protoc_insertion_point(copy_constructor:stream.StatisticMsg)
}

inline void StatisticMsg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&network_phase1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_counts_) -
    reinterpret_cast<char*>(&network_phase1_)) + sizeof(result_counts_));
}

StatisticMsg::~StatisticMsg() {
  // @@protoc_insertion_point(destructor:stream.StatisticMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StatisticMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StatisticMsg::ArenaDtor(void* object) {
  StatisticMsg* _this = reinterpret_cast< StatisticMsg* >(object);
  (void)_this;
}
void StatisticMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatisticMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StatisticMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:stream.StatisticMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  small_skewkeys_.Clear();
  big_skewkeys_.Clear();
  ::memset(&network_phase1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_counts_) -
      reinterpret_cast<char*>(&network_phase1_)) + sizeof(result_counts_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatisticMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 network_phase1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          network_phase1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 network_phase2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          network_phase2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 result_counts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          result_counts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .stream.Tuple small_skewkeys = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_small_skewkeys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .stream.Tuple big_skewkeys = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_big_skewkeys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatisticMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stream.StatisticMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 network_phase1 = 1;
  if (this->_internal_network_phase1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_network_phase1(), target);
  }

  // int64 network_phase2 = 2;
  if (this->_internal_network_phase2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_network_phase2(), target);
  }

  // int64 result_counts = 3;
  if (this->_internal_result_counts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_result_counts(), target);
  }

  // repeated .stream.Tuple small_skewkeys = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_small_skewkeys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_small_skewkeys(i), target, stream);
  }

  // repeated .stream.Tuple big_skewkeys = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_big_skewkeys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_big_skewkeys(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stream.StatisticMsg)
  return target;
}

size_t StatisticMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stream.StatisticMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .stream.Tuple small_skewkeys = 4;
  total_size += 1UL * this->_internal_small_skewkeys_size();
  for (const auto& msg : this->small_skewkeys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .stream.Tuple big_skewkeys = 5;
  total_size += 1UL * this->_internal_big_skewkeys_size();
  for (const auto& msg : this->big_skewkeys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 network_phase1 = 1;
  if (this->_internal_network_phase1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_network_phase1());
  }

  // int64 network_phase2 = 2;
  if (this->_internal_network_phase2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_network_phase2());
  }

  // int64 result_counts = 3;
  if (this->_internal_result_counts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_result_counts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatisticMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StatisticMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatisticMsg::GetClassData() const { return &_class_data_; }

void StatisticMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StatisticMsg *>(to)->MergeFrom(
      static_cast<const StatisticMsg &>(from));
}


void StatisticMsg::MergeFrom(const StatisticMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stream.StatisticMsg)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  small_skewkeys_.MergeFrom(from.small_skewkeys_);
  big_skewkeys_.MergeFrom(from.big_skewkeys_);
  if (from._internal_network_phase1() != 0) {
    _internal_set_network_phase1(from._internal_network_phase1());
  }
  if (from._internal_network_phase2() != 0) {
    _internal_set_network_phase2(from._internal_network_phase2());
  }
  if (from._internal_result_counts() != 0) {
    _internal_set_result_counts(from._internal_result_counts());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatisticMsg::CopyFrom(const StatisticMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stream.StatisticMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatisticMsg::IsInitialized() const {
  return true;
}

void StatisticMsg::InternalSwap(StatisticMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  small_skewkeys_.InternalSwap(&other->small_skewkeys_);
  big_skewkeys_.InternalSwap(&other->big_skewkeys_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatisticMsg, result_counts_)
      + sizeof(StatisticMsg::result_counts_)
      - PROTOBUF_FIELD_OFFSET(StatisticMsg, network_phase1_)>(
          reinterpret_cast<char*>(&network_phase1_),
          reinterpret_cast<char*>(&other->network_phase1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatisticMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stream_2eproto_getter, &descriptor_table_stream_2eproto_once,
      file_level_metadata_stream_2eproto[0]);
}

// ===================================================================

class StreamSummary::_Internal {
 public:
};

StreamSummary::StreamSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stream.StreamSummary)
}
StreamSummary::StreamSummary(const StreamSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:stream.StreamSummary)
}

inline void StreamSummary::SharedCtor() {
count_ = int64_t{0};
}

StreamSummary::~StreamSummary() {
  // @@protoc_insertion_point(destructor:stream.StreamSummary)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StreamSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StreamSummary::ArenaDtor(void* object) {
  StreamSummary* _this = reinterpret_cast< StreamSummary* >(object);
  (void)_this;
}
void StreamSummary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:stream.StreamSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  count_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamSummary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stream.StreamSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 count = 1;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stream.StreamSummary)
  return target;
}

size_t StreamSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stream.StreamSummary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 count = 1;
  if (this->_internal_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamSummary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamSummary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamSummary::GetClassData() const { return &_class_data_; }

void StreamSummary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StreamSummary *>(to)->MergeFrom(
      static_cast<const StreamSummary &>(from));
}


void StreamSummary::MergeFrom(const StreamSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stream.StreamSummary)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_count() != 0) {
    _internal_set_count(from._internal_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamSummary::CopyFrom(const StreamSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stream.StreamSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamSummary::IsInitialized() const {
  return true;
}

void StreamSummary::InternalSwap(StreamSummary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamSummary::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stream_2eproto_getter, &descriptor_table_stream_2eproto_once,
      file_level_metadata_stream_2eproto[1]);
}

// ===================================================================

class Tuple::_Internal {
 public:
};

Tuple::Tuple(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stream.Tuple)
}
Tuple::Tuple(const Tuple& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:stream.Tuple)
}

inline void Tuple::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Tuple::~Tuple() {
  // @@protoc_insertion_point(destructor:stream.Tuple)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Tuple::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Tuple::ArenaDtor(void* object) {
  Tuple* _this = reinterpret_cast< Tuple* >(object);
  (void)_this;
}
void Tuple::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Tuple::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Tuple::Clear() {
// @@protoc_insertion_point(message_clear_start:stream.Tuple)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tuple::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stream.Tuple.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stream.Tuple.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Tuple::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stream.Tuple)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stream.Tuple.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stream.Tuple.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stream.Tuple)
  return target;
}

size_t Tuple::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stream.Tuple)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Tuple::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Tuple::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Tuple::GetClassData() const { return &_class_data_; }

void Tuple::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Tuple *>(to)->MergeFrom(
      static_cast<const Tuple &>(from));
}


void Tuple::MergeFrom(const Tuple& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stream.Tuple)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Tuple::CopyFrom(const Tuple& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stream.Tuple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tuple::IsInitialized() const {
  return true;
}

void Tuple::InternalSwap(Tuple* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, GetArenaForAllocation(),
      &other->key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Tuple::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stream_2eproto_getter, &descriptor_table_stream_2eproto_once,
      file_level_metadata_stream_2eproto[2]);
}

// ===================================================================

class BatchTuple::_Internal {
 public:
};

BatchTuple::BatchTuple(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tuples_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stream.BatchTuple)
}
BatchTuple::BatchTuple(const BatchTuple& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tuples_(from.tuples_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  empty_ = from.empty_;
  // @@protoc_insertion_point(copy_constructor:stream.BatchTuple)
}

inline void BatchTuple::SharedCtor() {
empty_ = false;
}

BatchTuple::~BatchTuple() {
  // @@protoc_insertion_point(destructor:stream.BatchTuple)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BatchTuple::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BatchTuple::ArenaDtor(void* object) {
  BatchTuple* _this = reinterpret_cast< BatchTuple* >(object);
  (void)_this;
}
void BatchTuple::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatchTuple::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BatchTuple::Clear() {
// @@protoc_insertion_point(message_clear_start:stream.BatchTuple)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tuples_.Clear();
  empty_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchTuple::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool empty = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          empty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .stream.Tuple tuples = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tuples(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatchTuple::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stream.BatchTuple)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool empty = 1;
  if (this->_internal_empty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_empty(), target);
  }

  // repeated .stream.Tuple tuples = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tuples_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_tuples(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stream.BatchTuple)
  return target;
}

size_t BatchTuple::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stream.BatchTuple)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .stream.Tuple tuples = 3;
  total_size += 1UL * this->_internal_tuples_size();
  for (const auto& msg : this->tuples_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool empty = 1;
  if (this->_internal_empty() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchTuple::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BatchTuple::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchTuple::GetClassData() const { return &_class_data_; }

void BatchTuple::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BatchTuple *>(to)->MergeFrom(
      static_cast<const BatchTuple &>(from));
}


void BatchTuple::MergeFrom(const BatchTuple& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stream.BatchTuple)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tuples_.MergeFrom(from.tuples_);
  if (from._internal_empty() != 0) {
    _internal_set_empty(from._internal_empty());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchTuple::CopyFrom(const BatchTuple& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stream.BatchTuple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchTuple::IsInitialized() const {
  return true;
}

void BatchTuple::InternalSwap(BatchTuple* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tuples_.InternalSwap(&other->tuples_);
  swap(empty_, other->empty_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchTuple::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stream_2eproto_getter, &descriptor_table_stream_2eproto_once,
      file_level_metadata_stream_2eproto[3]);
}

// ===================================================================

class SMessage::_Internal {
 public:
  static const ::stream::BatchTuple& batch_tuples(const SMessage* msg);
};

const ::stream::BatchTuple&
SMessage::_Internal::batch_tuples(const SMessage* msg) {
  return *msg->batch_tuples_;
}
SMessage::SMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  skew_keys_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stream.SMessage)
}
SMessage::SMessage(const SMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      skew_keys_(from.skew_keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_batch_tuples()) {
    batch_tuples_ = new ::stream::BatchTuple(*from.batch_tuples_);
  } else {
    batch_tuples_ = nullptr;
  }
  stream_id_ = from.stream_id_;
  // @@protoc_insertion_point(copy_constructor:stream.SMessage)
}

inline void SMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&batch_tuples_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stream_id_) -
    reinterpret_cast<char*>(&batch_tuples_)) + sizeof(stream_id_));
}

SMessage::~SMessage() {
  // @@protoc_insertion_point(destructor:stream.SMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete batch_tuples_;
}

void SMessage::ArenaDtor(void* object) {
  SMessage* _this = reinterpret_cast< SMessage* >(object);
  (void)_this;
}
void SMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:stream.SMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skew_keys_.Clear();
  if (GetArenaForAllocation() == nullptr && batch_tuples_ != nullptr) {
    delete batch_tuples_;
  }
  batch_tuples_ = nullptr;
  stream_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 stream_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string skew_keys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_skew_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stream.SMessage.skew_keys"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .stream.BatchTuple batch_tuples = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_batch_tuples(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stream.SMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 stream_id = 1;
  if (this->_internal_stream_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_stream_id(), target);
  }

  // repeated string skew_keys = 2;
  for (int i = 0, n = this->_internal_skew_keys_size(); i < n; i++) {
    const auto& s = this->_internal_skew_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stream.SMessage.skew_keys");
    target = stream->WriteString(2, s, target);
  }

  // .stream.BatchTuple batch_tuples = 3;
  if (this->_internal_has_batch_tuples()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::batch_tuples(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stream.SMessage)
  return target;
}

size_t SMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stream.SMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string skew_keys = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(skew_keys_.size());
  for (int i = 0, n = skew_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      skew_keys_.Get(i));
  }

  // .stream.BatchTuple batch_tuples = 3;
  if (this->_internal_has_batch_tuples()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *batch_tuples_);
  }

  // int32 stream_id = 1;
  if (this->_internal_stream_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stream_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SMessage::GetClassData() const { return &_class_data_; }

void SMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SMessage *>(to)->MergeFrom(
      static_cast<const SMessage &>(from));
}


void SMessage::MergeFrom(const SMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stream.SMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  skew_keys_.MergeFrom(from.skew_keys_);
  if (from._internal_has_batch_tuples()) {
    _internal_mutable_batch_tuples()->::stream::BatchTuple::MergeFrom(from._internal_batch_tuples());
  }
  if (from._internal_stream_id() != 0) {
    _internal_set_stream_id(from._internal_stream_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SMessage::CopyFrom(const SMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stream.SMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMessage::IsInitialized() const {
  return true;
}

void SMessage::InternalSwap(SMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  skew_keys_.InternalSwap(&other->skew_keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SMessage, stream_id_)
      + sizeof(SMessage::stream_id_)
      - PROTOBUF_FIELD_OFFSET(SMessage, batch_tuples_)>(
          reinterpret_cast<char*>(&batch_tuples_),
          reinterpret_cast<char*>(&other->batch_tuples_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stream_2eproto_getter, &descriptor_table_stream_2eproto_once,
      file_level_metadata_stream_2eproto[4]);
}

// ===================================================================

class BDMessage::_Internal {
 public:
  static const ::stream::BatchTuple& batch_tuples(const BDMessage* msg);
};

const ::stream::BatchTuple&
BDMessage::_Internal::batch_tuples(const BDMessage* msg) {
  return *msg->batch_tuples_;
}
BDMessage::BDMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  need_keys_(arena),
  done_keys_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stream.BDMessage)
}
BDMessage::BDMessage(const BDMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      need_keys_(from.need_keys_),
      done_keys_(from.done_keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_batch_tuples()) {
    batch_tuples_ = new ::stream::BatchTuple(*from.batch_tuples_);
  } else {
    batch_tuples_ = nullptr;
  }
  ::memcpy(&stream_id_, &from.stream_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&close_) -
    reinterpret_cast<char*>(&stream_id_)) + sizeof(close_));
  // @@protoc_insertion_point(copy_constructor:stream.BDMessage)
}

inline void BDMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&batch_tuples_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&close_) -
    reinterpret_cast<char*>(&batch_tuples_)) + sizeof(close_));
}

BDMessage::~BDMessage() {
  // @@protoc_insertion_point(destructor:stream.BDMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BDMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete batch_tuples_;
}

void BDMessage::ArenaDtor(void* object) {
  BDMessage* _this = reinterpret_cast< BDMessage* >(object);
  (void)_this;
}
void BDMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BDMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BDMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:stream.BDMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  need_keys_.Clear();
  done_keys_.Clear();
  if (GetArenaForAllocation() == nullptr && batch_tuples_ != nullptr) {
    delete batch_tuples_;
  }
  batch_tuples_ = nullptr;
  ::memset(&stream_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&close_) -
      reinterpret_cast<char*>(&stream_id_)) + sizeof(close_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BDMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 stream_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string need_keys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_need_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stream.BDMessage.need_keys"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string done_keys = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_done_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stream.BDMessage.done_keys"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .stream.BatchTuple batch_tuples = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_batch_tuples(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool close = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          close_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BDMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stream.BDMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 stream_id = 1;
  if (this->_internal_stream_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_stream_id(), target);
  }

  // repeated string need_keys = 2;
  for (int i = 0, n = this->_internal_need_keys_size(); i < n; i++) {
    const auto& s = this->_internal_need_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stream.BDMessage.need_keys");
    target = stream->WriteString(2, s, target);
  }

  // repeated string done_keys = 3;
  for (int i = 0, n = this->_internal_done_keys_size(); i < n; i++) {
    const auto& s = this->_internal_done_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stream.BDMessage.done_keys");
    target = stream->WriteString(3, s, target);
  }

  // .stream.BatchTuple batch_tuples = 4;
  if (this->_internal_has_batch_tuples()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::batch_tuples(this), target, stream);
  }

  // bool close = 5;
  if (this->_internal_close() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_close(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stream.BDMessage)
  return target;
}

size_t BDMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stream.BDMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string need_keys = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(need_keys_.size());
  for (int i = 0, n = need_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      need_keys_.Get(i));
  }

  // repeated string done_keys = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(done_keys_.size());
  for (int i = 0, n = done_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      done_keys_.Get(i));
  }

  // .stream.BatchTuple batch_tuples = 4;
  if (this->_internal_has_batch_tuples()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *batch_tuples_);
  }

  // int32 stream_id = 1;
  if (this->_internal_stream_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stream_id());
  }

  // bool close = 5;
  if (this->_internal_close() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BDMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BDMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BDMessage::GetClassData() const { return &_class_data_; }

void BDMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BDMessage *>(to)->MergeFrom(
      static_cast<const BDMessage &>(from));
}


void BDMessage::MergeFrom(const BDMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stream.BDMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  need_keys_.MergeFrom(from.need_keys_);
  done_keys_.MergeFrom(from.done_keys_);
  if (from._internal_has_batch_tuples()) {
    _internal_mutable_batch_tuples()->::stream::BatchTuple::MergeFrom(from._internal_batch_tuples());
  }
  if (from._internal_stream_id() != 0) {
    _internal_set_stream_id(from._internal_stream_id());
  }
  if (from._internal_close() != 0) {
    _internal_set_close(from._internal_close());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BDMessage::CopyFrom(const BDMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stream.BDMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BDMessage::IsInitialized() const {
  return true;
}

void BDMessage::InternalSwap(BDMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  need_keys_.InternalSwap(&other->need_keys_);
  done_keys_.InternalSwap(&other->done_keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BDMessage, close_)
      + sizeof(BDMessage::close_)
      - PROTOBUF_FIELD_OFFSET(BDMessage, batch_tuples_)>(
          reinterpret_cast<char*>(&batch_tuples_),
          reinterpret_cast<char*>(&other->batch_tuples_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BDMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stream_2eproto_getter, &descriptor_table_stream_2eproto_once,
      file_level_metadata_stream_2eproto[5]);
}

// ===================================================================

class StreamInfo::_Internal {
 public:
};

StreamInfo::StreamInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stream.StreamInfo)
}
StreamInfo::StreamInfo(const StreamInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  server_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_server_address().empty()) {
    server_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_server_address(), 
      GetArenaForAllocation());
  }
  ::memcpy(&stream_id_, &from.stream_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&stream_id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:stream.StreamInfo)
}

inline void StreamInfo::SharedCtor() {
server_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stream_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&stream_id_)) + sizeof(type_));
}

StreamInfo::~StreamInfo() {
  // @@protoc_insertion_point(destructor:stream.StreamInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StreamInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  server_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StreamInfo::ArenaDtor(void* object) {
  StreamInfo* _this = reinterpret_cast< StreamInfo* >(object);
  (void)_this;
}
void StreamInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:stream.StreamInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_address_.ClearToEmpty();
  ::memset(&stream_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&stream_id_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 stream_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .stream.StreamInfo.StreamType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::stream::StreamInfo_StreamType>(val));
        } else goto handle_unusual;
        continue;
      // string server_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_server_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stream.StreamInfo.server_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stream.StreamInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 stream_id = 1;
  if (this->_internal_stream_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_stream_id(), target);
  }

  // .stream.StreamInfo.StreamType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // string server_address = 3;
  if (!this->_internal_server_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server_address().data(), static_cast<int>(this->_internal_server_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stream.StreamInfo.server_address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_server_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stream.StreamInfo)
  return target;
}

size_t StreamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stream.StreamInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string server_address = 3;
  if (!this->_internal_server_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_address());
  }

  // int32 stream_id = 1;
  if (this->_internal_stream_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stream_id());
  }

  // .stream.StreamInfo.StreamType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamInfo::GetClassData() const { return &_class_data_; }

void StreamInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StreamInfo *>(to)->MergeFrom(
      static_cast<const StreamInfo &>(from));
}


void StreamInfo::MergeFrom(const StreamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stream.StreamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_server_address().empty()) {
    _internal_set_server_address(from._internal_server_address());
  }
  if (from._internal_stream_id() != 0) {
    _internal_set_stream_id(from._internal_stream_id());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamInfo::CopyFrom(const StreamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stream.StreamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamInfo::IsInitialized() const {
  return true;
}

void StreamInfo::InternalSwap(StreamInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &server_address_, GetArenaForAllocation(),
      &other->server_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamInfo, type_)
      + sizeof(StreamInfo::type_)
      - PROTOBUF_FIELD_OFFSET(StreamInfo, stream_id_)>(
          reinterpret_cast<char*>(&stream_id_),
          reinterpret_cast<char*>(&other->stream_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stream_2eproto_getter, &descriptor_table_stream_2eproto_once,
      file_level_metadata_stream_2eproto[6]);
}

// ===================================================================

class TableReaderInfo::_Internal {
 public:
};

TableReaderInfo::TableReaderInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  output_infos_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stream.TableReaderInfo)
}
TableReaderInfo::TableReaderInfo(const TableReaderInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      output_infos_(from.output_infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_name().empty()) {
    file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&router_type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(router_type_));
  // @@protoc_insertion_point(copy_constructor:stream.TableReaderInfo)
}

inline void TableReaderInfo::SharedCtor() {
file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&router_type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(router_type_));
}

TableReaderInfo::~TableReaderInfo() {
  // @@protoc_insertion_point(destructor:stream.TableReaderInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TableReaderInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TableReaderInfo::ArenaDtor(void* object) {
  TableReaderInfo* _this = reinterpret_cast< TableReaderInfo* >(object);
  (void)_this;
}
void TableReaderInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableReaderInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TableReaderInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:stream.TableReaderInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  output_infos_.Clear();
  file_name_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&router_type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(router_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableReaderInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .stream.TableReaderInfo.TableReaderType tr_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tr_type(static_cast<::stream::TableReaderInfo_TableReaderType>(val));
        } else goto handle_unusual;
        continue;
      // string file_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stream.TableReaderInfo.file_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .stream.TableReaderInfo.RouterType router_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_router_type(static_cast<::stream::TableReaderInfo_RouterType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .stream.StreamInfo output_infos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_output_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableReaderInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stream.TableReaderInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .stream.TableReaderInfo.TableReaderType tr_type = 2;
  if (this->_internal_tr_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_tr_type(), target);
  }

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stream.TableReaderInfo.file_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_name(), target);
  }

  // .stream.TableReaderInfo.RouterType router_type = 4;
  if (this->_internal_router_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_router_type(), target);
  }

  // repeated .stream.StreamInfo output_infos = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_output_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_output_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stream.TableReaderInfo)
  return target;
}

size_t TableReaderInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stream.TableReaderInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .stream.StreamInfo output_infos = 5;
  total_size += 1UL * this->_internal_output_infos_size();
  for (const auto& msg : this->output_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // .stream.TableReaderInfo.TableReaderType tr_type = 2;
  if (this->_internal_tr_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tr_type());
  }

  // .stream.TableReaderInfo.RouterType router_type = 4;
  if (this->_internal_router_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_router_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableReaderInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TableReaderInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableReaderInfo::GetClassData() const { return &_class_data_; }

void TableReaderInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TableReaderInfo *>(to)->MergeFrom(
      static_cast<const TableReaderInfo &>(from));
}


void TableReaderInfo::MergeFrom(const TableReaderInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stream.TableReaderInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output_infos_.MergeFrom(from.output_infos_);
  if (!from._internal_file_name().empty()) {
    _internal_set_file_name(from._internal_file_name());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_tr_type() != 0) {
    _internal_set_tr_type(from._internal_tr_type());
  }
  if (from._internal_router_type() != 0) {
    _internal_set_router_type(from._internal_router_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableReaderInfo::CopyFrom(const TableReaderInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stream.TableReaderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableReaderInfo::IsInitialized() const {
  return true;
}

void TableReaderInfo::InternalSwap(TableReaderInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  output_infos_.InternalSwap(&other->output_infos_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_name_, GetArenaForAllocation(),
      &other->file_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableReaderInfo, router_type_)
      + sizeof(TableReaderInfo::router_type_)
      - PROTOBUF_FIELD_OFFSET(TableReaderInfo, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TableReaderInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stream_2eproto_getter, &descriptor_table_stream_2eproto_once,
      file_level_metadata_stream_2eproto[7]);
}

// ===================================================================

class HashJoinerInfo::_Internal {
 public:
};

HashJoinerInfo::HashJoinerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  big_infos_(arena),
  small_infos_(arena),
  bd_infos_(arena),
  output_infos_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stream.HashJoinerInfo)
}
HashJoinerInfo::HashJoinerInfo(const HashJoinerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      big_infos_(from.big_infos_),
      small_infos_(from.small_infos_),
      bd_infos_(from.bd_infos_),
      output_infos_(from.output_infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:stream.HashJoinerInfo)
}

inline void HashJoinerInfo::SharedCtor() {
type_ = 0;
}

HashJoinerInfo::~HashJoinerInfo() {
  // @@protoc_insertion_point(destructor:stream.HashJoinerInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HashJoinerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HashJoinerInfo::ArenaDtor(void* object) {
  HashJoinerInfo* _this = reinterpret_cast< HashJoinerInfo* >(object);
  (void)_this;
}
void HashJoinerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HashJoinerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HashJoinerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:stream.HashJoinerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  big_infos_.Clear();
  small_infos_.Clear();
  bd_infos_.Clear();
  output_infos_.Clear();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HashJoinerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .stream.HashJoinerInfo.HJType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::stream::HashJoinerInfo_HJType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .stream.StreamInfo big_infos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_big_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .stream.StreamInfo small_infos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_small_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .stream.StreamInfo bd_infos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bd_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .stream.StreamInfo output_infos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_output_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HashJoinerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stream.HashJoinerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .stream.HashJoinerInfo.HJType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // repeated .stream.StreamInfo big_infos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_big_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_big_infos(i), target, stream);
  }

  // repeated .stream.StreamInfo small_infos = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_small_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_small_infos(i), target, stream);
  }

  // repeated .stream.StreamInfo bd_infos = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bd_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_bd_infos(i), target, stream);
  }

  // repeated .stream.StreamInfo output_infos = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_output_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_output_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stream.HashJoinerInfo)
  return target;
}

size_t HashJoinerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stream.HashJoinerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .stream.StreamInfo big_infos = 2;
  total_size += 1UL * this->_internal_big_infos_size();
  for (const auto& msg : this->big_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .stream.StreamInfo small_infos = 3;
  total_size += 1UL * this->_internal_small_infos_size();
  for (const auto& msg : this->small_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .stream.StreamInfo bd_infos = 4;
  total_size += 1UL * this->_internal_bd_infos_size();
  for (const auto& msg : this->bd_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .stream.StreamInfo output_infos = 5;
  total_size += 1UL * this->_internal_output_infos_size();
  for (const auto& msg : this->output_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .stream.HashJoinerInfo.HJType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HashJoinerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HashJoinerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HashJoinerInfo::GetClassData() const { return &_class_data_; }

void HashJoinerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<HashJoinerInfo *>(to)->MergeFrom(
      static_cast<const HashJoinerInfo &>(from));
}


void HashJoinerInfo::MergeFrom(const HashJoinerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stream.HashJoinerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  big_infos_.MergeFrom(from.big_infos_);
  small_infos_.MergeFrom(from.small_infos_);
  bd_infos_.MergeFrom(from.bd_infos_);
  output_infos_.MergeFrom(from.output_infos_);
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HashJoinerInfo::CopyFrom(const HashJoinerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stream.HashJoinerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashJoinerInfo::IsInitialized() const {
  return true;
}

void HashJoinerInfo::InternalSwap(HashJoinerInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  big_infos_.InternalSwap(&other->big_infos_);
  small_infos_.InternalSwap(&other->small_infos_);
  bd_infos_.InternalSwap(&other->bd_infos_);
  output_infos_.InternalSwap(&other->output_infos_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HashJoinerInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stream_2eproto_getter, &descriptor_table_stream_2eproto_once,
      file_level_metadata_stream_2eproto[8]);
}

// ===================================================================

class SFRInfo::_Internal {
 public:
};

SFRInfo::SFRInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stream.SFRInfo)
}
SFRInfo::SFRInfo(const SFRInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&n_, &from.n_,
    static_cast<size_t>(reinterpret_cast<char*>(&cols_) -
    reinterpret_cast<char*>(&n_)) + sizeof(cols_));
  // @@protoc_insertion_point(copy_constructor:stream.SFRInfo)
}

inline void SFRInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&n_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cols_) -
    reinterpret_cast<char*>(&n_)) + sizeof(cols_));
}

SFRInfo::~SFRInfo() {
  // @@protoc_insertion_point(destructor:stream.SFRInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SFRInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SFRInfo::ArenaDtor(void* object) {
  SFRInfo* _this = reinterpret_cast< SFRInfo* >(object);
  (void)_this;
}
void SFRInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SFRInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SFRInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:stream.SFRInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&n_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cols_) -
      reinterpret_cast<char*>(&n_)) + sizeof(cols_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SFRInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 n = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rows = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cols = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cols_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SFRInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stream.SFRInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 n = 1;
  if (this->_internal_n() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_n(), target);
  }

  // int32 rows = 2;
  if (this->_internal_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_rows(), target);
  }

  // int32 cols = 3;
  if (this->_internal_cols() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_cols(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stream.SFRInfo)
  return target;
}

size_t SFRInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stream.SFRInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 n = 1;
  if (this->_internal_n() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_n());
  }

  // int32 rows = 2;
  if (this->_internal_rows() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rows());
  }

  // int32 cols = 3;
  if (this->_internal_cols() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cols());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SFRInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SFRInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SFRInfo::GetClassData() const { return &_class_data_; }

void SFRInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SFRInfo *>(to)->MergeFrom(
      static_cast<const SFRInfo &>(from));
}


void SFRInfo::MergeFrom(const SFRInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stream.SFRInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_n() != 0) {
    _internal_set_n(from._internal_n());
  }
  if (from._internal_rows() != 0) {
    _internal_set_rows(from._internal_rows());
  }
  if (from._internal_cols() != 0) {
    _internal_set_cols(from._internal_cols());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SFRInfo::CopyFrom(const SFRInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stream.SFRInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SFRInfo::IsInitialized() const {
  return true;
}

void SFRInfo::InternalSwap(SFRInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SFRInfo, cols_)
      + sizeof(SFRInfo::cols_)
      - PROTOBUF_FIELD_OFFSET(SFRInfo, n_)>(
          reinterpret_cast<char*>(&n_),
          reinterpret_cast<char*>(&other->n_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SFRInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stream_2eproto_getter, &descriptor_table_stream_2eproto_once,
      file_level_metadata_stream_2eproto[9]);
}

// ===================================================================

class ProcessorsInfo::_Internal {
 public:
  static const ::stream::SFRInfo& sfr_info(const ProcessorsInfo* msg);
};

const ::stream::SFRInfo&
ProcessorsInfo::_Internal::sfr_info(const ProcessorsInfo* msg) {
  return *msg->sfr_info_;
}
ProcessorsInfo::ProcessorsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tablereader_infos_(arena),
  hashjoiner_infos_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stream.ProcessorsInfo)
}
ProcessorsInfo::ProcessorsInfo(const ProcessorsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tablereader_infos_(from.tablereader_infos_),
      hashjoiner_infos_(from.hashjoiner_infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sfr_info()) {
    sfr_info_ = new ::stream::SFRInfo(*from.sfr_info_);
  } else {
    sfr_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:stream.ProcessorsInfo)
}

inline void ProcessorsInfo::SharedCtor() {
sfr_info_ = nullptr;
}

ProcessorsInfo::~ProcessorsInfo() {
  // @@protoc_insertion_point(destructor:stream.ProcessorsInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProcessorsInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete sfr_info_;
}

void ProcessorsInfo::ArenaDtor(void* object) {
  ProcessorsInfo* _this = reinterpret_cast< ProcessorsInfo* >(object);
  (void)_this;
}
void ProcessorsInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessorsInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProcessorsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:stream.ProcessorsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tablereader_infos_.Clear();
  hashjoiner_infos_.Clear();
  if (GetArenaForAllocation() == nullptr && sfr_info_ != nullptr) {
    delete sfr_info_;
  }
  sfr_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessorsInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .stream.SFRInfo sfr_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sfr_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .stream.TableReaderInfo tablereader_infos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tablereader_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .stream.HashJoinerInfo hashjoiner_infos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hashjoiner_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessorsInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stream.ProcessorsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .stream.SFRInfo sfr_info = 1;
  if (this->_internal_has_sfr_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sfr_info(this), target, stream);
  }

  // repeated .stream.TableReaderInfo tablereader_infos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tablereader_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tablereader_infos(i), target, stream);
  }

  // repeated .stream.HashJoinerInfo hashjoiner_infos = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hashjoiner_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_hashjoiner_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stream.ProcessorsInfo)
  return target;
}

size_t ProcessorsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stream.ProcessorsInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .stream.TableReaderInfo tablereader_infos = 2;
  total_size += 1UL * this->_internal_tablereader_infos_size();
  for (const auto& msg : this->tablereader_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .stream.HashJoinerInfo hashjoiner_infos = 3;
  total_size += 1UL * this->_internal_hashjoiner_infos_size();
  for (const auto& msg : this->hashjoiner_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .stream.SFRInfo sfr_info = 1;
  if (this->_internal_has_sfr_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sfr_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessorsInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProcessorsInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessorsInfo::GetClassData() const { return &_class_data_; }

void ProcessorsInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ProcessorsInfo *>(to)->MergeFrom(
      static_cast<const ProcessorsInfo &>(from));
}


void ProcessorsInfo::MergeFrom(const ProcessorsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stream.ProcessorsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tablereader_infos_.MergeFrom(from.tablereader_infos_);
  hashjoiner_infos_.MergeFrom(from.hashjoiner_infos_);
  if (from._internal_has_sfr_info()) {
    _internal_mutable_sfr_info()->::stream::SFRInfo::MergeFrom(from._internal_sfr_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessorsInfo::CopyFrom(const ProcessorsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stream.ProcessorsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessorsInfo::IsInitialized() const {
  return true;
}

void ProcessorsInfo::InternalSwap(ProcessorsInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tablereader_infos_.InternalSwap(&other->tablereader_infos_);
  hashjoiner_infos_.InternalSwap(&other->hashjoiner_infos_);
  swap(sfr_info_, other->sfr_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessorsInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stream_2eproto_getter, &descriptor_table_stream_2eproto_once,
      file_level_metadata_stream_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace stream
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::stream::StatisticMsg* Arena::CreateMaybeMessage< ::stream::StatisticMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stream::StatisticMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::stream::StreamSummary* Arena::CreateMaybeMessage< ::stream::StreamSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stream::StreamSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::stream::Tuple* Arena::CreateMaybeMessage< ::stream::Tuple >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stream::Tuple >(arena);
}
template<> PROTOBUF_NOINLINE ::stream::BatchTuple* Arena::CreateMaybeMessage< ::stream::BatchTuple >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stream::BatchTuple >(arena);
}
template<> PROTOBUF_NOINLINE ::stream::SMessage* Arena::CreateMaybeMessage< ::stream::SMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stream::SMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::stream::BDMessage* Arena::CreateMaybeMessage< ::stream::BDMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stream::BDMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::stream::StreamInfo* Arena::CreateMaybeMessage< ::stream::StreamInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stream::StreamInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::stream::TableReaderInfo* Arena::CreateMaybeMessage< ::stream::TableReaderInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stream::TableReaderInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::stream::HashJoinerInfo* Arena::CreateMaybeMessage< ::stream::HashJoinerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stream::HashJoinerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::stream::SFRInfo* Arena::CreateMaybeMessage< ::stream::SFRInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stream::SFRInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::stream::ProcessorsInfo* Arena::CreateMaybeMessage< ::stream::ProcessorsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stream::ProcessorsInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
