// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: stream.proto
#ifndef GRPC_stream_2eproto__INCLUDED
#define GRPC_stream_2eproto__INCLUDED

#include "stream.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace stream {

class Stream final {
 public:
  static constexpr char const* service_full_name() {
    return "stream.Stream";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status StartProcessors(::grpc::ClientContext* context, const ::stream::ProcessorsInfo& request, ::stream::StatisticMsg* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::stream::StatisticMsg>> AsyncStartProcessors(::grpc::ClientContext* context, const ::stream::ProcessorsInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::stream::StatisticMsg>>(AsyncStartProcessorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::stream::StatisticMsg>> PrepareAsyncStartProcessors(::grpc::ClientContext* context, const ::stream::ProcessorsInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::stream::StatisticMsg>>(PrepareAsyncStartProcessorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::stream::SMessage>> GetStream(::grpc::ClientContext* context, ::stream::StreamSummary* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::stream::SMessage>>(GetStreamRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::stream::SMessage>> AsyncGetStream(::grpc::ClientContext* context, ::stream::StreamSummary* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::stream::SMessage>>(AsyncGetStreamRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::stream::SMessage>> PrepareAsyncGetStream(::grpc::ClientContext* context, ::stream::StreamSummary* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::stream::SMessage>>(PrepareAsyncGetStreamRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::stream::BDMessage>> GetBDStream(::grpc::ClientContext* context, ::stream::StreamSummary* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::stream::BDMessage>>(GetBDStreamRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::stream::BDMessage>> AsyncGetBDStream(::grpc::ClientContext* context, ::stream::StreamSummary* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::stream::BDMessage>>(AsyncGetBDStreamRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::stream::BDMessage>> PrepareAsyncGetBDStream(::grpc::ClientContext* context, ::stream::StreamSummary* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::stream::BDMessage>>(PrepareAsyncGetBDStreamRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::stream::SMessage>> RunDistLDSketch(::grpc::ClientContext* context, ::stream::SMessage* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::stream::SMessage>>(RunDistLDSketchRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::stream::SMessage>> AsyncRunDistLDSketch(::grpc::ClientContext* context, ::stream::SMessage* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::stream::SMessage>>(AsyncRunDistLDSketchRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::stream::SMessage>> PrepareAsyncRunDistLDSketch(::grpc::ClientContext* context, ::stream::SMessage* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::stream::SMessage>>(PrepareAsyncRunDistLDSketchRaw(context, response, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void StartProcessors(::grpc::ClientContext* context, const ::stream::ProcessorsInfo* request, ::stream::StatisticMsg* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StartProcessors(::grpc::ClientContext* context, const ::stream::ProcessorsInfo* request, ::stream::StatisticMsg* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetStream(::grpc::ClientContext* context, ::stream::StreamSummary* response, ::grpc::ClientWriteReactor< ::stream::SMessage>* reactor) = 0;
      virtual void GetBDStream(::grpc::ClientContext* context, ::stream::StreamSummary* response, ::grpc::ClientWriteReactor< ::stream::BDMessage>* reactor) = 0;
      virtual void RunDistLDSketch(::grpc::ClientContext* context, ::stream::SMessage* response, ::grpc::ClientWriteReactor< ::stream::SMessage>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::stream::StatisticMsg>* AsyncStartProcessorsRaw(::grpc::ClientContext* context, const ::stream::ProcessorsInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::stream::StatisticMsg>* PrepareAsyncStartProcessorsRaw(::grpc::ClientContext* context, const ::stream::ProcessorsInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::stream::SMessage>* GetStreamRaw(::grpc::ClientContext* context, ::stream::StreamSummary* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::stream::SMessage>* AsyncGetStreamRaw(::grpc::ClientContext* context, ::stream::StreamSummary* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::stream::SMessage>* PrepareAsyncGetStreamRaw(::grpc::ClientContext* context, ::stream::StreamSummary* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::stream::BDMessage>* GetBDStreamRaw(::grpc::ClientContext* context, ::stream::StreamSummary* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::stream::BDMessage>* AsyncGetBDStreamRaw(::grpc::ClientContext* context, ::stream::StreamSummary* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::stream::BDMessage>* PrepareAsyncGetBDStreamRaw(::grpc::ClientContext* context, ::stream::StreamSummary* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::stream::SMessage>* RunDistLDSketchRaw(::grpc::ClientContext* context, ::stream::SMessage* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::stream::SMessage>* AsyncRunDistLDSketchRaw(::grpc::ClientContext* context, ::stream::SMessage* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::stream::SMessage>* PrepareAsyncRunDistLDSketchRaw(::grpc::ClientContext* context, ::stream::SMessage* response, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status StartProcessors(::grpc::ClientContext* context, const ::stream::ProcessorsInfo& request, ::stream::StatisticMsg* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::stream::StatisticMsg>> AsyncStartProcessors(::grpc::ClientContext* context, const ::stream::ProcessorsInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::stream::StatisticMsg>>(AsyncStartProcessorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::stream::StatisticMsg>> PrepareAsyncStartProcessors(::grpc::ClientContext* context, const ::stream::ProcessorsInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::stream::StatisticMsg>>(PrepareAsyncStartProcessorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::stream::SMessage>> GetStream(::grpc::ClientContext* context, ::stream::StreamSummary* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::stream::SMessage>>(GetStreamRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::stream::SMessage>> AsyncGetStream(::grpc::ClientContext* context, ::stream::StreamSummary* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::stream::SMessage>>(AsyncGetStreamRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::stream::SMessage>> PrepareAsyncGetStream(::grpc::ClientContext* context, ::stream::StreamSummary* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::stream::SMessage>>(PrepareAsyncGetStreamRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::stream::BDMessage>> GetBDStream(::grpc::ClientContext* context, ::stream::StreamSummary* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::stream::BDMessage>>(GetBDStreamRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::stream::BDMessage>> AsyncGetBDStream(::grpc::ClientContext* context, ::stream::StreamSummary* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::stream::BDMessage>>(AsyncGetBDStreamRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::stream::BDMessage>> PrepareAsyncGetBDStream(::grpc::ClientContext* context, ::stream::StreamSummary* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::stream::BDMessage>>(PrepareAsyncGetBDStreamRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::stream::SMessage>> RunDistLDSketch(::grpc::ClientContext* context, ::stream::SMessage* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::stream::SMessage>>(RunDistLDSketchRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::stream::SMessage>> AsyncRunDistLDSketch(::grpc::ClientContext* context, ::stream::SMessage* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::stream::SMessage>>(AsyncRunDistLDSketchRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::stream::SMessage>> PrepareAsyncRunDistLDSketch(::grpc::ClientContext* context, ::stream::SMessage* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::stream::SMessage>>(PrepareAsyncRunDistLDSketchRaw(context, response, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void StartProcessors(::grpc::ClientContext* context, const ::stream::ProcessorsInfo* request, ::stream::StatisticMsg* response, std::function<void(::grpc::Status)>) override;
      void StartProcessors(::grpc::ClientContext* context, const ::stream::ProcessorsInfo* request, ::stream::StatisticMsg* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetStream(::grpc::ClientContext* context, ::stream::StreamSummary* response, ::grpc::ClientWriteReactor< ::stream::SMessage>* reactor) override;
      void GetBDStream(::grpc::ClientContext* context, ::stream::StreamSummary* response, ::grpc::ClientWriteReactor< ::stream::BDMessage>* reactor) override;
      void RunDistLDSketch(::grpc::ClientContext* context, ::stream::SMessage* response, ::grpc::ClientWriteReactor< ::stream::SMessage>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::stream::StatisticMsg>* AsyncStartProcessorsRaw(::grpc::ClientContext* context, const ::stream::ProcessorsInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::stream::StatisticMsg>* PrepareAsyncStartProcessorsRaw(::grpc::ClientContext* context, const ::stream::ProcessorsInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::stream::SMessage>* GetStreamRaw(::grpc::ClientContext* context, ::stream::StreamSummary* response) override;
    ::grpc::ClientAsyncWriter< ::stream::SMessage>* AsyncGetStreamRaw(::grpc::ClientContext* context, ::stream::StreamSummary* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::stream::SMessage>* PrepareAsyncGetStreamRaw(::grpc::ClientContext* context, ::stream::StreamSummary* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::stream::BDMessage>* GetBDStreamRaw(::grpc::ClientContext* context, ::stream::StreamSummary* response) override;
    ::grpc::ClientAsyncWriter< ::stream::BDMessage>* AsyncGetBDStreamRaw(::grpc::ClientContext* context, ::stream::StreamSummary* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::stream::BDMessage>* PrepareAsyncGetBDStreamRaw(::grpc::ClientContext* context, ::stream::StreamSummary* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::stream::SMessage>* RunDistLDSketchRaw(::grpc::ClientContext* context, ::stream::SMessage* response) override;
    ::grpc::ClientAsyncWriter< ::stream::SMessage>* AsyncRunDistLDSketchRaw(::grpc::ClientContext* context, ::stream::SMessage* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::stream::SMessage>* PrepareAsyncRunDistLDSketchRaw(::grpc::ClientContext* context, ::stream::SMessage* response, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_StartProcessors_;
    const ::grpc::internal::RpcMethod rpcmethod_GetStream_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBDStream_;
    const ::grpc::internal::RpcMethod rpcmethod_RunDistLDSketch_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status StartProcessors(::grpc::ServerContext* context, const ::stream::ProcessorsInfo* request, ::stream::StatisticMsg* response);
    virtual ::grpc::Status GetStream(::grpc::ServerContext* context, ::grpc::ServerReader< ::stream::SMessage>* reader, ::stream::StreamSummary* response);
    virtual ::grpc::Status GetBDStream(::grpc::ServerContext* context, ::grpc::ServerReader< ::stream::BDMessage>* reader, ::stream::StreamSummary* response);
    virtual ::grpc::Status RunDistLDSketch(::grpc::ServerContext* context, ::grpc::ServerReader< ::stream::SMessage>* reader, ::stream::SMessage* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_StartProcessors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StartProcessors() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_StartProcessors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartProcessors(::grpc::ServerContext* /*context*/, const ::stream::ProcessorsInfo* /*request*/, ::stream::StatisticMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartProcessors(::grpc::ServerContext* context, ::stream::ProcessorsInfo* request, ::grpc::ServerAsyncResponseWriter< ::stream::StatisticMsg>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetStream() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::stream::SMessage>* /*reader*/, ::stream::StreamSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::stream::StreamSummary, ::stream::SMessage>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBDStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBDStream() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetBDStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBDStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::stream::BDMessage>* /*reader*/, ::stream::StreamSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBDStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::stream::StreamSummary, ::stream::BDMessage>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RunDistLDSketch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RunDistLDSketch() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_RunDistLDSketch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunDistLDSketch(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::stream::SMessage>* /*reader*/, ::stream::SMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRunDistLDSketch(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::stream::SMessage, ::stream::SMessage>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(3, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_StartProcessors<WithAsyncMethod_GetStream<WithAsyncMethod_GetBDStream<WithAsyncMethod_RunDistLDSketch<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_StartProcessors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StartProcessors() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::stream::ProcessorsInfo, ::stream::StatisticMsg>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::stream::ProcessorsInfo* request, ::stream::StatisticMsg* response) { return this->StartProcessors(context, request, response); }));}
    void SetMessageAllocatorFor_StartProcessors(
        ::grpc::MessageAllocator< ::stream::ProcessorsInfo, ::stream::StatisticMsg>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::stream::ProcessorsInfo, ::stream::StatisticMsg>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StartProcessors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartProcessors(::grpc::ServerContext* /*context*/, const ::stream::ProcessorsInfo* /*request*/, ::stream::StatisticMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StartProcessors(
      ::grpc::CallbackServerContext* /*context*/, const ::stream::ProcessorsInfo* /*request*/, ::stream::StatisticMsg* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetStream() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::stream::SMessage, ::stream::StreamSummary>(
            [this](
                   ::grpc::CallbackServerContext* context, ::stream::StreamSummary* response) { return this->GetStream(context, response); }));
    }
    ~WithCallbackMethod_GetStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::stream::SMessage>* /*reader*/, ::stream::StreamSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::stream::SMessage>* GetStream(
      ::grpc::CallbackServerContext* /*context*/, ::stream::StreamSummary* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetBDStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetBDStream() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::stream::BDMessage, ::stream::StreamSummary>(
            [this](
                   ::grpc::CallbackServerContext* context, ::stream::StreamSummary* response) { return this->GetBDStream(context, response); }));
    }
    ~WithCallbackMethod_GetBDStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBDStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::stream::BDMessage>* /*reader*/, ::stream::StreamSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::stream::BDMessage>* GetBDStream(
      ::grpc::CallbackServerContext* /*context*/, ::stream::StreamSummary* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RunDistLDSketch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RunDistLDSketch() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackClientStreamingHandler< ::stream::SMessage, ::stream::SMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, ::stream::SMessage* response) { return this->RunDistLDSketch(context, response); }));
    }
    ~WithCallbackMethod_RunDistLDSketch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunDistLDSketch(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::stream::SMessage>* /*reader*/, ::stream::SMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::stream::SMessage>* RunDistLDSketch(
      ::grpc::CallbackServerContext* /*context*/, ::stream::SMessage* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_StartProcessors<WithCallbackMethod_GetStream<WithCallbackMethod_GetBDStream<WithCallbackMethod_RunDistLDSketch<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_StartProcessors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StartProcessors() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_StartProcessors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartProcessors(::grpc::ServerContext* /*context*/, const ::stream::ProcessorsInfo* /*request*/, ::stream::StatisticMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetStream() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::stream::SMessage>* /*reader*/, ::stream::StreamSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBDStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBDStream() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetBDStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBDStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::stream::BDMessage>* /*reader*/, ::stream::StreamSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RunDistLDSketch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RunDistLDSketch() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_RunDistLDSketch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunDistLDSketch(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::stream::SMessage>* /*reader*/, ::stream::SMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartProcessors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StartProcessors() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_StartProcessors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartProcessors(::grpc::ServerContext* /*context*/, const ::stream::ProcessorsInfo* /*request*/, ::stream::StatisticMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartProcessors(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetStream() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::stream::SMessage>* /*reader*/, ::stream::StreamSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBDStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBDStream() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetBDStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBDStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::stream::BDMessage>* /*reader*/, ::stream::StreamSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBDStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RunDistLDSketch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RunDistLDSketch() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_RunDistLDSketch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunDistLDSketch(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::stream::SMessage>* /*reader*/, ::stream::SMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRunDistLDSketch(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(3, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StartProcessors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StartProcessors() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StartProcessors(context, request, response); }));
    }
    ~WithRawCallbackMethod_StartProcessors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartProcessors(::grpc::ServerContext* /*context*/, const ::stream::ProcessorsInfo* /*request*/, ::stream::StatisticMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StartProcessors(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetStream() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->GetStream(context, response); }));
    }
    ~WithRawCallbackMethod_GetStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::stream::SMessage>* /*reader*/, ::stream::StreamSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* GetStream(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetBDStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetBDStream() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->GetBDStream(context, response); }));
    }
    ~WithRawCallbackMethod_GetBDStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBDStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::stream::BDMessage>* /*reader*/, ::stream::StreamSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* GetBDStream(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RunDistLDSketch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RunDistLDSketch() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->RunDistLDSketch(context, response); }));
    }
    ~WithRawCallbackMethod_RunDistLDSketch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunDistLDSketch(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::stream::SMessage>* /*reader*/, ::stream::SMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* RunDistLDSketch(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartProcessors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StartProcessors() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::stream::ProcessorsInfo, ::stream::StatisticMsg>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::stream::ProcessorsInfo, ::stream::StatisticMsg>* streamer) {
                       return this->StreamedStartProcessors(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StartProcessors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartProcessors(::grpc::ServerContext* /*context*/, const ::stream::ProcessorsInfo* /*request*/, ::stream::StatisticMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartProcessors(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::stream::ProcessorsInfo,::stream::StatisticMsg>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_StartProcessors<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_StartProcessors<Service > StreamedService;
};

}  // namespace stream


#endif  // GRPC_stream_2eproto__INCLUDED
